/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Events API
 * Events API - v1
 * OpenAPI spec version: v3
 */

import type { ApiResponse } from '@/domain/entities/api-response.interface'
import type { Event } from '@/domain/entities/event.interface'

export interface UserRequestDTO extends ApiResponse {
  name?: string
  email?: string
}

export interface SubscriptionResponseDTO extends ApiResponse {
  subscriptionNumber?: number
  designation?: string
}

export interface LocalTime extends ApiResponse {
  hour?: number
  minute?: number
  second?: number
  nano?: number
}

export interface SubscriptionRankingItem extends ApiResponse {
  userId?: number
  name?: string
  subscribers?: number
}

export interface SubscriptionRankingByUser extends ApiResponse {
  position?: number
  indicatorInformation?: SubscriptionRankingItem
}

export type UpdateHints200 = { [key: string]: unknown }

export const getCreateNewSubscriptionUrl = (
  eventPrettyName: string,
  userIndicatorId: number
) => {
  return `http://localhost:8080/api/v1/subscriptions/${eventPrettyName}/${userIndicatorId}`
}

export const createNewSubscription = async (
  eventPrettyName: string,
  userIndicatorId: number,
  userRequestDTO: UserRequestDTO,
  options?: RequestInit
): Promise<SubscriptionResponseDTO> => {
  const res = await fetch(
    getCreateNewSubscriptionUrl(eventPrettyName, userIndicatorId),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(userRequestDTO),
    }
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: SubscriptionResponseDTO = body ? JSON.parse(body) : {}

  return data
}

export const getCreateNewSubscription1Url = (eventPrettyName: string) => {
  return `http://localhost:8080/api/v1/subscriptions/${eventPrettyName}`
}

export const createNewSubscription1 = async (
  eventPrettyName: string,
  userRequestDTO: UserRequestDTO,
  options?: RequestInit
): Promise<SubscriptionResponseDTO> => {
  const res = await fetch(getCreateNewSubscription1Url(eventPrettyName), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(userRequestDTO),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: SubscriptionResponseDTO = body ? JSON.parse(body) : {}

  return data
}

export const getGetAllEventsUrl = () => {
  return 'http://localhost:8080/api/v1/events'
}

export const getAllEvents = async (options?: RequestInit): Promise<Event[]> => {
  const res = await fetch(getGetAllEventsUrl(), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: Event[] = body ? JSON.parse(body) : {}

  return data
}

export const getAddNewEventUrl = () => {
  return 'http://localhost:8080/api/v1/events'
}

export const addNewEvent = async (
  event: Event,
  options?: RequestInit
): Promise<Event> => {
  const res = await fetch(getAddNewEventUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(event),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: Event = body ? JSON.parse(body) : {}

  return data
}

export const getGetHintsUrl = (eventPrettyName: string, userId: number) => {
  return `http://localhost:8080/api/v1/invite/hints/${eventPrettyName}/${userId}`
}

export const getHints = async (
  eventPrettyName: string,
  userId: number,
  options?: RequestInit
): Promise<number> => {
  const res = await fetch(getGetHintsUrl(eventPrettyName, userId), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: number = body ? JSON.parse(body) : {}

  return data
}

export const getUpdateHintsUrl = (eventPrettyName: string, userId: number) => {
  return `http://localhost:8080/api/v1/invite/hints/${eventPrettyName}/${userId}`
}

export const updateHints = async (
  eventPrettyName: string,
  userId: number,
  options?: RequestInit
): Promise<UpdateHints200> => {
  const res = await fetch(getUpdateHintsUrl(eventPrettyName, userId), {
    ...options,
    method: 'PATCH',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: UpdateHints200 = body ? JSON.parse(body) : {}

  return data
}

export const getGenerateRankingByEventUrl = (prettyName: string) => {
  return `http://localhost:8080/api/v1/subscriptions/${prettyName}/ranking`
}

export const generateRankingByEvent = async (
  prettyName: string,
  options?: RequestInit
): Promise<SubscriptionRankingItem[]> => {
  const res = await fetch(getGenerateRankingByEventUrl(prettyName), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: SubscriptionRankingItem[] = body ? JSON.parse(body) : {}

  return data
}

export const getGenerateRankingByEventAndUserIdUrl = (
  prettyName: string,
  userId: number
) => {
  return `http://localhost:8080/api/v1/subscriptions/${prettyName}/ranking/${userId}`
}

export const generateRankingByEventAndUserId = async (
  prettyName: string,
  userId: number,
  options?: RequestInit
): Promise<SubscriptionRankingByUser> => {
  const res = await fetch(
    getGenerateRankingByEventAndUserIdUrl(prettyName, userId),
    {
      ...options,
      method: 'GET',
    }
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: SubscriptionRankingByUser = body ? JSON.parse(body) : {}

  return data
}

export const getGetEventByPrettyNameUrl = (prettyName: string) => {
  return `http://localhost:8080/api/v1/events/${prettyName}`
}

export const getEventByPrettyName = async (
  prettyName: string,
  options?: RequestInit
): Promise<Event> => {
  const res = await fetch(getGetEventByPrettyNameUrl(prettyName), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: Event = body ? JSON.parse(body) : {}

  return data
}
